/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context.Context as ctx } from "./../graphql/types"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  DateTimeFieldUpdateOperationsInput: { // input type
    set?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  RegionCreateInput: { // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: string | null; // String
    regCode: string; // String!
    regName: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  RegionUpdateInput: { // input type
    createdAt?: NexusGenInputs['DateTimeFieldUpdateOperationsInput'] | null; // DateTimeFieldUpdateOperationsInput
    id?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
    regCode?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
    regName?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
    updatedAt?: NexusGenInputs['DateTimeFieldUpdateOperationsInput'] | null; // DateTimeFieldUpdateOperationsInput
  }
  RegionWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  StringFieldUpdateOperationsInput: { // input type
    set?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    accessToken?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  InvalidUser: { // root type
    message: string; // String!
  }
  Mutation: {};
  Query: {};
  RecordAlreadyExists: { // root type
    message: string; // String!
  }
  Region: { // root type
    id: string; // String!
    regCode: string; // String!
    regName: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: string; // String!
  }
  UserAlreadyExists: { // root type
    message: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  LoginResult: NexusGenRootTypes['AuthPayload'] | NexusGenRootTypes['InvalidUser'];
  SignupResult: NexusGenRootTypes['AuthPayload'] | NexusGenRootTypes['UserAlreadyExists'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    accessToken: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  InvalidUser: { // field return type
    message: string; // String!
  }
  Mutation: { // field return type
    createOneRegion: NexusGenRootTypes['Region']; // Region!
    createRegion: NexusGenRootTypes['Region'] | null; // Region
    deleteOneRegion: NexusGenRootTypes['Region'] | null; // Region
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    updateOneRegion: NexusGenRootTypes['Region'] | null; // Region
  }
  Query: { // field return type
    me: NexusGenRootTypes['User'] | null; // User
    region: NexusGenRootTypes['Region'] | null; // Region
    regions: Array<NexusGenRootTypes['Region'] | null> | null; // [Region]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  RecordAlreadyExists: { // field return type
    message: string; // String!
  }
  Region: { // field return type
    id: string; // String!
    regCode: string; // String!
    regName: string; // String!
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
  }
  UserAlreadyExists: { // field return type
    message: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    accessToken: 'String'
    user: 'User'
  }
  InvalidUser: { // field return type name
    message: 'String'
  }
  Mutation: { // field return type name
    createOneRegion: 'Region'
    createRegion: 'Region'
    deleteOneRegion: 'Region'
    login: 'AuthPayload'
    signup: 'AuthPayload'
    updateOneRegion: 'Region'
  }
  Query: { // field return type name
    me: 'User'
    region: 'Region'
    regions: 'Region'
    users: 'User'
  }
  RecordAlreadyExists: { // field return type name
    message: 'String'
  }
  Region: { // field return type name
    id: 'String'
    regCode: 'String'
    regName: 'String'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
  }
  UserAlreadyExists: { // field return type name
    message: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneRegion: { // args
      data: NexusGenInputs['RegionCreateInput']; // RegionCreateInput!
    }
    createRegion: { // args
      data: NexusGenInputs['RegionCreateInput']; // RegionCreateInput!
    }
    deleteOneRegion: { // args
      where: NexusGenInputs['RegionWhereUniqueInput']; // RegionWhereUniqueInput!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      password: string; // String!
    }
    updateOneRegion: { // args
      data: NexusGenInputs['RegionUpdateInput']; // RegionUpdateInput!
      where: NexusGenInputs['RegionWhereUniqueInput']; // RegionWhereUniqueInput!
    }
  }
  Query: {
    me: { // args
      id?: string | null; // String
    }
    region: { // args
      id?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  LoginResult: "AuthPayload" | "InvalidUser"
  SignupResult: "AuthPayload" | "UserAlreadyExists"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "LoginResult" | "SignupResult";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: ctx;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}