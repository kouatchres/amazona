### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  accessToken: String
  user: User
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

type InvalidUser {
  message: String!
}

union LoginResult = AuthPayload | InvalidUser

type Mutation {
  createOneRegion(data: RegionCreateInput!): Region!

  """Stores a Region manually"""
  createRegion(data: RegionCreateInput!): Region
  deleteOneRegion(where: RegionWhereUniqueInput!): Region
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, password: String!): AuthPayload
  updateOneRegion(data: RegionUpdateInput!, where: RegionWhereUniqueInput!): Region
}

type Query {
  me(id: String): User
  region(id: String): Region
  regions: [Region]
  users: [User]
}

type RecordAlreadyExists {
  message: String!
}

type Region {
  id: String!
  regCode: String!
  regName: String!
}

input RegionCreateInput {
  createdAt: DateTime
  id: String
  regCode: String!
  regName: String!
  updatedAt: DateTime
}

input RegionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  regCode: StringFieldUpdateOperationsInput
  regName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RegionWhereUniqueInput {
  id: String
}

union SignupResult = AuthPayload | UserAlreadyExists

input StringFieldUpdateOperationsInput {
  set: String
}

type User {
  email: String!
  id: String!
}

type UserAlreadyExists {
  message: String!
}
